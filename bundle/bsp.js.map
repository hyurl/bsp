{"version":3,"sources":["webpack://bsp/webpack/universalModuleDefinition","webpack://bsp/webpack/bootstrap","webpack://bsp/./index.js","webpack://bsp/./node_modules/concat-typed-array/lib/concat.js","webpack://bsp/./node_modules/concat-typed-array/lib/index.js","webpack://bsp/./node_modules/is-like/index.js","webpack://bsp/./node_modules/sprintf-js/src/sprintf.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFa;AACb,8CAA8C,cAAc;;AAE5D,gBAAgB,mBAAO,CAAC,4DAAY;AACpC,yBAAyB,mBAAO,CAAC,0EAAoB;AACrD,OAAO,eAAe,GAAG,mBAAO,CAAC,gDAAS;;AAE1C;AACA;;AAEA,WAAW,YAAY;AACvB;AACA,WAAW,YAAY;AACvB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,WAAW,kBAAkB;AAC7B,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,WAAW,wBAAwB;AACnC,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,6BAA6B;AAC7B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA,wDAAwD,QAAQ;AAChE;AACA;AACA,SAAS;AACT;;AAEA,wDAAwD,QAAQ;AAChE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,kBAAkB;AAC7B;AACA;AACA;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,OAAO;AAClC;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,QAAQ;AACnC;AACA;;AAEA;AACA;AACA;;AAEA,YAAY;AACZ;;AAEA;AACA,WAAW,oCAAoC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,kBAAkB;AAC7B,WAAW,oCAAoC;AAC/C;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,eAAe;AACf,KAAK;AACL;AACA;AACA,KAAK;AACL,aAAa,uBAAuB;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,kBAAkB;AAC7B,WAAW,oCAAoC;AAC/C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,8BAA8B;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oB;;;;;;;;;;;;ACtTa;;AAEb;AACA;AACA,CAAC;;AAED;AACA;;AAEA,sFAAsF,aAAa;AACnG;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0DAA0D,gEAAgE;AAC1H;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,4DAA4D,mEAAmE;AAC/H;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,E;;;;;;;;;;;;ACnEa;;AAEb,cAAc,mBAAO,CAAC,iEAAU;;AAEhC;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,kC;;;;;;;;;;;;ACRa;AACb,8CAA8C,cAAc;;AAE5D;AACA,WAAW,IAAI;AACf,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;ACzCA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,sBAAsB;AACttC;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,IAA6C;AACzD,YAAY,mCAAO;AACnB;AACA;AACA;AACA;AACA,aAAa;AAAA,oGAAC;AACd;AACA;AACA;AACA,CAAC,GAAG","file":"bsp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bsp\"] = factory();\n\telse\n\t\troot[\"bsp\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./index.js\");\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\nconst sprintf = require(\"sprintf-js\").sprintf;\nconst concatTypedArray = require(\"concat-typed-array\");\nconst { isBufferLike } = require(\"is-like\");\n\nconst hasBuffer = typeof Buffer === \"function\";\nconst TypedArray = hasBuffer ? Buffer : Uint8Array;\n\n/** @type {TextEncoder} */\nlet encoder;\n/** @type {TextDecoder} */\nlet decoder;\n\nif (typeof TextEncoder === \"function\") {\n    encoder = new TextEncoder();\n}\n\nif (typeof TextDecoder === \"function\") {\n    decoder = new TextDecoder(\"utf8\");\n}\n\n/**\n * @param {string} text \n * @returns {Buffer|Uint8Array}\n */\nfunction encodeText(text) {\n    if (hasBuffer) {\n        return Buffer.from(text);\n    } else if (encoder) {\n        return encoder.encode(text);\n    } else {\n        throw new Error(\"No implementation of text encoder was found\");\n    }\n}\n\n/**\n * @param {Buffer|Uint8Array} buf \n * @returns {string}\n */\nfunction decodeText(buf) {\n    if (hasBuffer) {\n        return Buffer.from(buf).toString(\"utf8\");\n    } else if (decoder) {\n        return decoder.decode(buf);\n    } else {\n        throw new Error(\"No implementation of text decoder was found\");\n    }\n}\n\n/**\n * @param {Buffer[] | Uint8Array[]} bufs\n * @returns {Buffer|Uint8Array}\n */\nfunction concatBuffers(bufs) {\n    return concatTypedArray(TypedArray, ...bufs);\n}\n\nfunction encode(...data) {\n    let buf = TypedArray.from([]);\n\n    for (let payload of data) {\n        let type = NaN;\n\n        switch (typeof payload) {\n            case \"string\":\n                type = 1;\n                payload = encodeText(payload);\n                break;\n\n            case \"number\":\n                type = 2;\n                payload = encodeText(payload.toString());\n                break;\n\n            case \"bigint\":\n                type = 3;\n                payload = encodeText(payload.toString());\n                break;\n\n            case \"boolean\":\n                type = 4;\n                payload = TypedArray.from([Number(payload)]);\n                break;\n\n            case \"object\":\n                if (null === payload) {\n                    type = 0;\n                    payload = TypedArray.from([]);\n                } else if (isBufferLike(payload)) {\n                    type = 6; // raw data\n                } else {\n                    type = 5;\n                    payload = encodeText(JSON.stringify(payload));\n                }\n                break;\n        }\n\n        let head = [type];\n        let len = payload.byteLength;\n\n        if (len <= 255) {\n            head.push(1, len);\n        } else if (len <= 65535) {\n            head.push(2);\n\n            for (let i = 0, bin = sprintf(\"%016b\", len); i < 16;) {\n                head.push(parseInt(bin.slice(i, i += 8), 2));\n            }\n        } else {\n            head.push(3);\n\n            for (let i = 0, bin = sprintf(\"%064b\", len); i < 64;) {\n                head.push(parseInt(bin.slice(i, i += 8), 2));\n            }\n        }\n\n        buf = concatBuffers([buf, TypedArray.from(head), payload]);\n    }\n\n    return buf;\n}\n\n/**\n * @param {Buffer|Uint8Array} buf\n */\nfunction parsePayloadInfo(buf) {\n    if (buf.byteLength < 3) {\n        return null; // header frame\n    }\n\n    let [type, lenType] = buf;\n    let offset = [0, 3, 4, 10][lenType];\n    let length = -1;\n    let bin = \"\";\n\n    if (type > 6 || lenType > 3) {\n        return false; // malformed/unencoded data\n    }\n\n    if (buf.byteLength < offset) {\n        return null;  // header frame\n    }\n\n    switch (lenType) {\n        case 1:\n            length = buf[2];\n            break;\n\n        case 2:\n            for (let i = 2; i < 4; i++) {\n                bin += sprintf(\"%08b\", buf[i]);\n            }\n\n            length = parseInt(bin, 2);\n            break;\n\n        case 3:\n            for (let i = 2; i < 10; i++) {\n                bin += sprintf(\"%08b\", buf[i]);\n            }\n\n            length = parseInt(bin, 2);\n            break;\n    }\n\n    return { type, offset, length };\n}\n\n/**\n * @param {[number, number, Buffer|Uint8Array]} temp \n */\nfunction isHeaderTemp(temp) {\n    return temp.length === 3\n        && temp[0] === undefined\n        && temp[1] === undefined\n        && temp[2] instanceof Uint8Array;\n}\n\n/**\n * @param {Buffer|Uint8Array} buf \n * @param {[number, number, Buffer|Uint8Array]} temp \n */\nfunction fillTemp(buf, temp) {\n    if (isHeaderTemp(temp)) {\n        buf = concatBuffers([temp[2], buf]);\n    }\n\n    let info = parsePayloadInfo(buf);\n\n    if (info === false) {\n        return; // malformed/unencoded data\n    } else if (info === null) {\n        temp[0] = temp[1] = void 0;\n        temp[2] = buf;\n    } else {\n        let { type, length, offset } = info;\n\n        if (offset !== 0) {\n            temp[0] = type;\n            temp[1] = length;\n            temp[2] = buf.slice(offset);\n        }\n    }\n}\n\n/**\n * @param {Buffer|Uint8Array} buf \n * @param {[number, number, Buffer|Uint8Array]} temp\n * @returns {IterableIterator<any>}\n */\nfunction* decode(buf, temp) {\n    // put the buffer into the temp\n    if (temp.length === 0 || isHeaderTemp(temp)) {\n        fillTemp(buf, temp);\n    } else if (temp.length === 3) {\n        temp[2] = concatBuffers([temp[2], buf]);\n    }\n\n    // scan the temp and yield any parsed data\n    while (temp.length === 3 && temp[2].byteLength >= temp[1]) {\n        let [type, length, buf] = temp;\n        let payload = buf.slice(0, length);\n\n        buf = buf.slice(length);\n\n        switch (type) {\n            case 0: // null\n                yield null;\n                break;\n\n            case 1:\n                yield decodeText(payload);\n                break;\n\n            case 2:\n                yield Number(decodeText(payload));\n                break;\n\n            case 3:\n                yield BigInt(decodeText(payload));\n                break;\n\n            case 4:\n                yield Boolean(payload[0]);\n                break;\n\n            case 5:\n                yield JSON.parse(decodeText(payload));\n                break;\n\n            case 6:\n                yield payload;\n                break;\n        }\n\n        if (buf.byteLength > 0) {\n            fillTemp(buf, temp);\n        } else {\n            temp.splice(0, 3); // clean temp\n        }\n    }\n}\n\nfunction wrap(stream) {\n    let _write = stream.write.bind(stream);\n    let _on = stream.on.bind(stream);\n    let _once = stream.once.bind(stream);\n    let _prepend = stream.prependListener.bind(stream);\n    let _prependOnce = stream.prependOnceListener.bind(stream);\n    let addListener = (fn, event, listener) => {\n        if (event === \"data\") {\n            let temp = [];\n            let _listener = (buf) => {\n                for (let data of decode(buf, temp)) {\n                    listener(data);\n                }\n            };\n            return fn(\"data\", _listener);\n        } else {\n            return fn(event, listener);\n        }\n    };\n\n    stream.write = function write(chunk, encoding, callback) {\n        return _write(encode(chunk), encoding, callback);\n    };\n\n    stream.on = stream.addListener = function on(event, listener) {\n        return addListener(_on, event, listener);\n    };\n\n    stream.once = function once(event, listener) {\n        return addListener(_once, event, listener);\n    };\n\n    stream.prependListener = function prependListener(event, listener) {\n        return addListener(_prepend, event, listener);\n    };\n\n    stream.prependOnceListener = function prependOnceListener(event, listener) {\n        return addListener(_prependOnce, event, listener);\n    };\n\n    return stream;\n}\n\nexports.encode = encode;\nexports.decode = decode;\nexports.wrap = wrap;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (ResultConstructor) {\n  var totalLength = 0;\n\n  for (var _len = arguments.length, arrays = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    arrays[_key - 1] = arguments[_key];\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = arrays[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var arr = _step.value;\n\n      totalLength += arr.length;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var result = new ResultConstructor(totalLength);\n  var offset = 0;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = arrays[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _arr = _step2.value;\n\n      result.set(_arr, offset);\n      offset += _arr.length;\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return result;\n};","'use strict';\n\nvar _concat = require('./concat');\n\nvar _concat2 = _interopRequireDefault(_concat);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = _concat2.default;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\n/**\n * @param {any} obj \n * @param {Array<string|symbol>} props \n */\nfunction isObjectWith(obj, props) {\n    let isObj = typeof obj === \"object\" && obj !== null;\n    return isObj && props.every(p => p in obj);\n}\n\nfunction isArrayLike(obj) {\n    return isObjectWith(obj, [\"length\"]) || (typeof obj === \"string\");\n}\n\nfunction isCollectionLike(obj, excludeWeakOnes = false) {\n    return (isObjectWith(obj, [\"size\"])\n        && typeof obj[Symbol.iterator] === \"function\")\n        || (!excludeWeakOnes &&\n            (obj instanceof WeakMap || obj instanceof WeakSet));\n}\n\nfunction isBufferLike(obj) {\n    return isObjectWith(obj, [\"byteLength\"])\n        && typeof obj.slice === \"function\";\n}\n\nfunction isErrorLike(obj) {\n    return isObjectWith(obj, [\"name\", \"message\", \"stack\"]);\n}\n\nfunction isPromiseLike(obj) {\n    return isObjectWith(obj, [])\n        && typeof obj.then === \"function\";\n}\n\nexports.isArrayLike = isArrayLike;\nexports.isCollectionLike = isCollectionLike;\nexports.isBufferLike = isBufferLike;\nexports.isErrorLike = isErrorLike;\nexports.isPromiseLike = isPromiseLike;","/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k-1]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports['sprintf'] = sprintf\n        exports['vsprintf'] = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (typeof define === 'function' && define['amd']) {\n            define(function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            })\n        }\n    }\n    /* eslint-enable quote-props */\n}(); // eslint-disable-line\n"],"sourceRoot":""}